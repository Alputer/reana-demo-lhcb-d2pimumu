# Note that if you are working on the analysis development locally, i.e. outside
# of the REANA platform, you can proceed as follows:
#
#   $ cd reana-demo-lhcb-d2pimumu
#   $ mkdir -p yadage-local-run/yadage-inputs
#   $ cd yadage-local-run
#   $ cp -a ../*.C ../*.h ../data yadage-inputs
#   $ yadage-run . ../workflow/yadage/workflow.yaml \
#        -p data=data/D2PiMuMuOS.root \
#        -p optimise=Optimise.C \
#        -p modelfixing=ModelFixing.C \
#        -p massfit=OSMassFit.C \
#        -d initdir=`pwd`/yadage-inputs
#   $ firefox results/phi.pdf

stages:
  - name: optimisation
    dependencies: [init]
    scheduler:
      scheduler_type: 'singlestep-stage'
      parameters:
        optimise: {stages: init, output: optimise, unwrap: true}
        data: {stages: init, output: data, unwrap: true}
        outfilepath: '{workdir}'
        out_plot_2d_optimisation: '{workdir}/2D_Optimisation_Pi.pdf'
        out_plot_mumumass: '{workdir}/MuMuMass_Pi.pdf'
      step:
        process:
          process_type: 'interpolated-script-cmd'
          script: root -b -q '{optimise}("{data}", "{outfilepath}")'
        publisher:
          publisher_type: 'frompar-pub'
          outputmap:
            plot_2d_optimisation: out_plot_2d_optimisation
            plot_mumumass: out_plot_mumumass
        environment:
          environment_type: 'docker-encapsulated'
          image: 'reanahub/reana-env-root6'

  - name: theoreticalmodelfixing
    dependencies: [optimisation]
    scheduler:
      scheduler_type: 'singlestep-stage'
      parameters:
        modelfixing: {stages: init, output: modelfixing, unwrap: true}
        data: {stages: init, output: data, unwrap: true}
        outfilename: '{workdir}/PhiModels.root'
      step:
        process:
          process_type: 'interpolated-script-cmd'
          script: root -b -q '{modelfixing}("{data}", "{outfilename}")'
        publisher:
          publisher_type: 'frompar-pub'
          outputmap:
            phimodels: outfilename
        environment:
          environment_type: 'docker-encapsulated'
          image: 'reanahub/reana-env-root6'

  - name: massfitting
    dependencies: [theoreticalmodelfixing]
    scheduler:
      scheduler_type: 'singlestep-stage'
      parameters:
        massfit: {stages: init, output: massfit, unwrap: true}
        data: {stages: init, output: data, unwrap: true}
        phimodels: {stages: theoreticalmodelfixing, output: phimodels, unwrap: true}
        outfilepath: '{workdir}'
        out_plot_low_dimuon_signal: '{workdir}/low_dimuon_signal.pdf'
        out_plot_high_dimuon_signal: '{workdir}/high_dimuon_signal.pdf'
        out_plot_eta: '{workdir}/eta.pdf'
        out_plot_rho_omega: '{workdir}/rho_omega.pdf'
        out_plot_phi: '{workdir}/phi.pdf'

      step:
        process:
          process_type: 'interpolated-script-cmd'
          script: root -b -q '{massfit}("{data}", "{phimodels}", "{outfilepath}")'
        publisher:
          publisher_type: 'frompar-pub'
          outputmap:
            plot_low_dimuon_signal: out_plot_low_dimuon_signal
            plot_high_dimuon_signal: out_plot_high_dimuon_signal
            plot_eta: out_plot_eta
            plot_rho_omega: out_plot_rho_omega
            plot_phi: out_plot_phi
        environment:
          environment_type: 'docker-encapsulated'
          image: 'reanahub/reana-env-root6'
